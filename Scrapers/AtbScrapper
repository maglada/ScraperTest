using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.Playwright;

class ScraperAtb
{
    public static async Task RunScraper(string[] args)
    {
        string filePath = "sites/AtbLinks.txt";
        if (!File.Exists(filePath))
        {
            Console.WriteLine($"Links file not found: {filePath}");
            return;
        }

        var catalogUrls = File.ReadAllLines(filePath);

        using var playwright = await Playwright.CreateAsync();
        await using var browser = await playwright.Chromium.LaunchAsync(new BrowserTypeLaunchOptions
        {
            Headless = true
        });

        var context = await browser.NewContextAsync(new()
        {
            IgnoreHTTPSErrors = true,
            JavaScriptEnabled = true,
            ViewportSize = new ViewportSize { Width = 1920, Height = 1080 }
        });

        var page = await context.NewPageAsync();
        page.Console += (_, msg) => Console.WriteLine($"BROWSER: {msg.Text}");
        page.PageError += (_, err) => Console.WriteLine($"PAGE ERROR: {err}");

        foreach (var catalogUrl in catalogUrls)
        {
            if (string.IsNullOrWhiteSpace(catalogUrl)) continue;

            try
            {
                Console.WriteLine($"\n--- Catalog: {catalogUrl} ---");
                await page.GotoAsync(catalogUrl);
                await page.WaitForLoadStateAsync(LoadState.DOMContentLoaded);

                // Try several common product selectors and return raw inner text
                var selector = ".product-tile[data-testid*='product'], .product-card, [class*='ProductTile'], [class*='catalog-item__bottom'], [data-test*='product']";
                var productElements = await page.QuerySelectorAllAsync(selector);
                Console.WriteLine($"Found {productElements.Count} product elements");

                for (int i = 0; i < productElements.Count; i++)
                {
                    var el = productElements[i];
                    var text = await el.InnerTextAsync();
                    Console.WriteLine($"[{i+1}] {text}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error at {catalogUrl}: {ex.Message}");
            }
        }

        await context.CloseAsync();
    }
}

